package com.example.testapp

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.os.Build
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.style.TextAlign
import com.example.testapp.ui.theme.TestAppTheme
import java.io.IOException
import java.io.OutputStream
import java.util.UUID

class MainActivity : ComponentActivity() {
    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
    private var bluetoothSocket: BluetoothSocket? = null
    private var outputStream: OutputStream? = null

    private val serialUuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            TestAppTheme {
                BluetoothControlUI(
                    onSearchDevices = { searchBluetoothDevices() },
                    onConnect = { address -> connectToBluetooth(address) },
                    onSendCommand = { command -> sendCommand(command) }
                )
            }
        }
    }

    private fun searchBluetoothDevices(): List<String> {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val permissionGranted = checkSelfPermission(android.Manifest.permission.BLUETOOTH_CONNECT) == android.content.pm.PackageManager.PERMISSION_GRANTED
            if (!permissionGranted) {
                requestPermissions(arrayOf(android.Manifest.permission.BLUETOOTH_CONNECT), 1)
                return emptyList()
            }
        }

        val pairedDevices: Set<BluetoothDevice>? = bluetoothAdapter?.bondedDevices
        return pairedDevices?.map { "${it.name} - ${it.address}" } ?: emptyList()
    }

    private fun connectToBluetooth(address: String) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val permissionGranted = checkSelfPermission(android.Manifest.permission.BLUETOOTH_CONNECT) == android.content.pm.PackageManager.PERMISSION_GRANTED
            if (!permissionGranted) {
                requestPermissions(arrayOf(android.Manifest.permission.BLUETOOTH_CONNECT), 2)
                return
            }
        }

        bluetoothAdapter?.cancelDiscovery()

        try {
            val device: BluetoothDevice? = bluetoothAdapter?.getRemoteDevice(address)
            if (device != null) {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(serialUuid)
                bluetoothSocket?.connect()
                outputStream = bluetoothSocket?.outputStream
                // Uppdatera UI-status hÃ¤r
            }
        } catch (e: SecurityException) {
            e.printStackTrace()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    private fun sendCommand(command: String) {
        try {
            outputStream?.write(command.toByteArray())
            outputStream?.flush()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }
}


@Composable
fun BluetoothControlUI(
    onSearchDevices: () -> List<String>,
    onConnect: (String) -> Unit,
    onSendCommand: (String) -> Unit
) {
    var status by remember { mutableStateOf("Not Connected") }
    var devices by remember { mutableStateOf(emptyList<String>()) }
    var targetPosition by remember { mutableStateOf(180) } // Default to 180Â°
    var speed by remember { mutableStateOf(5) }
    var currentState by remember { mutableStateOf("Idle") }
    var lastCommand by remember { mutableStateOf("") }  // ðŸ”¹ Senaste skickade kommandot

    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
        Image(
            painter = painterResource(id = R.drawable.background_image),
            contentDescription = null,
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
                .padding(top = 60.dp),
            verticalArrangement = Arrangement.spacedBy(20.dp)
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = "Sweeping live scanning sonar",
                    fontWeight = FontWeight.Bold,
                    color = Color.White,
                    fontSize = 26.sp,
                    style = MaterialTheme.typography.bodyLarge
                )
                Divider(
                    color = Color.White,  // Line color
                    thickness = 4.dp,     // Line thickness
                    modifier = Modifier
                        .padding(top = 4.dp)  // Space between text and line
                        .width(350.dp)        // Line width (adjust as needed)
                )
            }

            Text(
                text = "Sweeping live scanning sonar",
                fontWeight = FontWeight.Bold,
                color = Color.White,
                fontSize = 18.sp,
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "Connection: $status",
                fontWeight = FontWeight.Bold,
                color = Color.White,
                fontSize = 18.sp,
                style = MaterialTheme.typography.bodyLarge
            )
            Text(
                text = "Last button pressed: $currentState",
                fontWeight = FontWeight.Bold,
                color = Color.White,
                fontSize = 18.sp,
                style = MaterialTheme.typography.bodyLarge
            )

            // ðŸ”¹ Visar det senaste skickade kommandot
            Text(
                text = "Last Command: $lastCommand",
                fontWeight = FontWeight.Bold,
                color = Color.Black,
                fontSize = 16.sp
            )

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                DropdownMenuWithLabel("Sweep", (1..7).map { "${it * 45}Â°" }, targetPosition) { selected ->
                    targetPosition = selected.toString().replace("Â°", "").toInt()
                }
                DropdownMenuWithLabel("Speed", (1..9).map { it.toString() }, speed) { selected ->
                    speed = selected.toString().toInt()
                }
            }
            //Spacer(modifier = Modifier.height(3.dp))

            // ðŸ”¹ Knappen som skickar P och H samt uppdaterar lastCommand
            Button(
                onClick = {
                    val command = "P$targetPosition H$speed"
                    onSendCommand(command)
                    lastCommand = command  // ðŸ”¹ Uppdatera senaste skickade kommandot
                    currentState = "Set sweep & Speed"
                },
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF64B5F6)) // Samma fÃ¤rg som Left & Right
            ) {
                Text(text = "Set Sweep and Speed", fontSize = 16.sp)
            }

            //Spacer(modifier = Modifier.height(1.dp))

            Button(
                onClick = {
                    onSendCommand("A")
                    lastCommand = "A"  // ðŸ”¹ Uppdatera senaste skickade kommandot
                    currentState = "Sweep Mode Activated"
                },
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF81C784)) // GrÃ¶n fÃ¤rg
            ) {
                Text(text = "Activate Sweep Mode", fontSize = 16.sp)
            }

            //Spacer(modifier = Modifier.height(2.dp))
            Text(
                text = "When activating sweep mode it will turn left from it's current position\n" +
                        " until it finds it's reference point. Max 45 degrees initial turn",
                fontWeight = FontWeight.Bold,
                color = Color.White,
                fontSize = 12.sp,
                style = MaterialTheme.typography.bodyLarge,
                textAlign = TextAlign.Center,
                modifier = Modifier.fillMaxWidth()
            )
            //Spacer(modifier = Modifier.height(2.dp))
            Button(
                onClick = {
                    onSendCommand("M")
                    lastCommand = "M"  // ðŸ”¹ Uppdatera senaste skickade kommandot
                    currentState = "Sweep Deactivated"
                },
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFE57373)) // RÃ¶d fÃ¤rg
            ) {
                Text(text = "Deactivate Sweep Mode", fontSize = 16.sp)
            }

            Spacer(modifier = Modifier.height(6.dp))

            Row(horizontalArrangement = Arrangement.spacedBy(60.dp)) {
                Button(
                    onClick = {
                        onSendCommand("L")
                        lastCommand = "L"  // ðŸ”¹ Uppdatera senaste skickade kommandot
                        currentState = "Turning Left"
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF64B5F6)) // Samma fÃ¤rg som Set Position
                ) {
                    Text(text = "Turn Left", fontSize = 16.sp)
                }

                Button(
                    onClick = {
                        onSendCommand("R")
                        lastCommand = "R"  // ðŸ”¹ Uppdatera senaste skickade kommandot
                        currentState = "Turning Right"
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF64B5F6)) // Samma fÃ¤rg som Set Position
                ) {
                    Text(text = "Turn Right", fontSize = 16.sp)
                }
            }
        }
    }
}


@Composable
fun <T> DropdownMenuWithLabel(label: String, options: List<T>, selectedOption: T, onOptionSelected: (T) -> Unit) {
    var expanded by remember { mutableStateOf(false) }

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.width(IntrinsicSize.Min)
    ) {
        Text(text = label, style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold, color = Color.White))
        Spacer(modifier = Modifier.height(8.dp))
        Box {
            Button(onClick = { expanded = true }) {
                Text(text = selectedOption.toString() + if (label == "Sweep") "Â°" else "")
            }
            DropdownMenu(
                expanded = expanded,
                onDismissRequest = { expanded = false },
                modifier = Modifier.width(IntrinsicSize.Min)
            ) {
                options.forEach { option ->
                    DropdownMenuItem(onClick = {
                        onOptionSelected(option)
                        expanded = false
                    }, text = {
                        Text(text = option.toString())
                    })
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewBluetoothControlUI() {
    TestAppTheme {
        BluetoothControlUI({ emptyList() }, {}, {})
    }
}
