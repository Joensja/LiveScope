WORK IN PROPGRES!!!!!!!!!

// ===============================
//      ESP32 FULL PORTNING
// ===============================
// Version: Maj 2024
// Original: Arduino/AVR (by user), ESP32-anpassning av ChatGPT/OpenAI
// Anpassad för Wemos D1 R32 / ESP32
//
// Allt från originalkoden är med, men anpassat för ESP32.

#include <Arduino.h>
#include <Wire.h>
#include <EEPROM.h>
#include <L298N.h>              // Behövs separat ESP32-anpassad om du har egen, annars byt till din motor driver klass
#include <Adafruit_HMC5883_U.h>
#include <PID_v1.h>

// ------- Bluetooth Serial för ESP32 --------
#define BT_RX 16    // Välj rätt RX pin (t.ex. 16 på D1 R32)
#define BT_TX 17    // Välj rätt TX pin (t.ex. 17 på D1 R32)
HardwareSerial BTserial(2);     // Serial2: RX2 = 16, TX2 = 17

// ------- PIN KONFIGURATION -------
// Byt till rätt enligt ditt kopplingsschema!
#define EN          18    // Motor Enable PWM
#define IN1         19    // Motor IN1
#define IN2         21    // Motor IN2
#define POS_SW      23    // Pos switch / endstop
#define ROT_SW1     25    // Rotation switch 1
#define ROT_SW2     26    // Rotation switch 2
#define BUZZER_PIN  27    // Buzzer pin
#define PEDAL_BUTTON 14   // Pedal-knapp
#define HALL_SENSOR_PIN 32 // Hall-sensor (om du använder)

#define PWM_CHANNEL   0
#define PWM_FREQ      1000
#define PWM_RESOLUTION 8

#define EEPROM_SIZE 64

// ----------- Objekten ------------
L298N* myMotor = nullptr; // Om du använder "extern" L298N-klass
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345);

// --------------- Variabler (alla!) ---------------
int driverMode = 1; // 1 = L298P shield, 2 = "extern" L298N
int sensorMode = 1; // 1 = POS-switch, 2 = Hall-sensor
bool useMagnetometer = true;
bool useHallSensor = false;
bool sweepModeActive = false;
bool compassModeActive = false;
bool bothPressing = false;

double setHeading = 0;
double output = 0;
double turnThreshold = 4;
double targetHeading = 0;
double userSetpoint = 0;
double currentHeading = 0;
double pidInput = 0;
double pidOutput = 0;
double pidSetpoint = 0;
double Kp = 2.5, Ki = 0.1, Kd = 1.5;
PID headingPID(&pidInput, &pidOutput, &pidSetpoint, Kp, Ki, Kd, DIRECT);

int sweep_angle = 5;
int manualSpeed = 125;
int sweepSpeed = 125;
int motorDirection = 1;
int lastPwmValue = 0;

unsigned long lastStopPrintTime = 0;
unsigned long lastPosSwPress = 0;
unsigned long posSwDebounceTime = 400;
unsigned long lastDebugPrintTime = 0;

// ----------- Funktionsdeklarationer -------------
void checkBothLongestPress(bool sw1, bool sw2);
void runsweepmaticMode();
void runManualMode(bool sw1, bool sw2);
void stopAllMotors();
void beepMultiple(int n);
void beepMultipleDuration(int n, int duration);
void beepQuickDouble();
void beepLong();
void beepMinMaxAlert();
void beepTriple();
void setSweepAngle();
void updateDebounceTime();
void checkModeExit();
void handleSerialCommand(char command);
void handleBluetoothCommand(char command);
void calibrateCompassMotorDirection();
void setMotorSpeed();
bool isPedalPressed();
bool isSensorActive();
void runCompassMode();
void saveSpeed(int address, int &currentSpeed, int newSpeed);
void savePIDValues();
void loadPIDValues();
void loadSettings();
bool checkHoldToExit(unsigned long &holdStart, unsigned long exitHoldTime = 3000);
void updateHeading();

// -------------------- Kort funktion för vinkelskillnad (wrap!) --------------------
double shortestAngle(double target, double current) {
    double diff = fmod((target - current + 540), 360) - 180;
    return diff;
}

// -------------------- EEPROM-funktioner, ESP32-style! --------------------
void saveSpeed(int address, int &currentSpeed, int newSpeed) {
  if (currentSpeed != newSpeed) {
    currentSpeed = newSpeed;
    EEPROM.write(address, newSpeed);
    EEPROM.commit(); // ESP32 kräver commit!
  }
}
void savePIDValues() {
    EEPROM.put(0, Kp);
    EEPROM.put(4, Ki);
    EEPROM.put(8, Kd);
    EEPROM.commit();
}
void loadPIDValues() {
    EEPROM.get(0, Kp);
    EEPROM.get(4, Ki);
    EEPROM.get(8, Kd);
    if (Kp == 0 || Ki == 0 || Kd == 0 || isnan(Kp) || isnan(Ki) || isnan(Kd)) {
      Kp = 2.5; Ki = 0.1; Kd = 0.5;
      savePIDValues();
    }
    headingPID.SetTunings(Kp, Ki, Kd);
}
void loadSettings() {
    EEPROM.get(12, turnThreshold);
    if (isnan(turnThreshold) || turnThreshold < 1 || turnThreshold > 20) {
        turnThreshold = 5;
        EEPROM.put(12, turnThreshold);
        EEPROM.commit();
    }
}

// ------------- ESP32 PWM-baserad "tone" ersättning -------------
void beep(unsigned long duration = 250) {
  ledcWriteTone(PWM_CHANNEL, 1000);
  delay(duration);
  ledcWriteTone(PWM_CHANNEL, 0);
}
void beepMultiple(int n) {
  for (int i = 0; i < n; i++) {
    beep(250);
    delay(250);
  }
}
void beepMultipleDuration(int n, int duration) {
  for (int i = 0; i < n; i++) {
    beep(duration);
    delay(200);
  }
}
void beepQuickDouble() {
  beep(100); delay(100); beep(100);
}
void beepLong() {
  beep(400);
}
void beepMinMaxAlert() {
  beep(100); delay(100); beep(100); delay(200); beep(400); delay(200); beep(400);
}
void beepTriple() {
  beep(100); delay(100); beep(100); delay(100); beep(100);
}

// ------------------------ PEDAL button (med debounce) ---------------------
bool isPedalPressed() {
  static unsigned long lastDebounceTime = 0;
  static bool lastState = HIGH;
  bool currentState = digitalRead(PEDAL_BUTTON) == LOW;
  if (currentState != lastState) lastDebounceTime = millis();
  if ((millis() - lastDebounceTime) > 50) {
    if (currentState) { lastState = currentState; return true; }
  }
  lastState = currentState;
  return false;
}

// --------------- SENSOR-AKTIV? ------------------
bool isSensorActive() {
  if (useHallSensor) return digitalRead(HALL_SENSOR_PIN) == LOW;
  else return digitalRead(POS_SW) == LOW;
}

// --------------- MOTORSTYRNING (ESP32-stil!) ---------------
void controlMotor(int direction, int speed) {
    lastPwmValue = speed;
    if (driverMode == 1) {
        digitalWrite(IN1, direction == 1 ? HIGH : LOW);
        digitalWrite(IN2, direction == 1 ? LOW : HIGH);
        ledcWrite(PWM_CHANNEL, speed);
    } else if (driverMode == 2 && myMotor) {
        myMotor->setSpeed(speed);
        if (direction == 1) myMotor->forward();
        else if (direction == -1) myMotor->backward();
    }
}
void stopAllMotors() {
    lastPwmValue = 0;
    if (driverMode == 1) ledcWrite(PWM_CHANNEL, 0);
    else if (driverMode == 2 && myMotor) myMotor->stop();
}

// -------------- DEBOUNCE & EXIT --------------
void updateDebounceTime() { posSwDebounceTime = 450; }
bool checkHoldToExit(unsigned long &holdStart, unsigned long exitHoldTime) {
    bool sw1 = (digitalRead(ROT_SW1) == LOW);
    bool sw2 = (digitalRead(ROT_SW2) == LOW);
    bool pedal = isPedalPressed();
    bool exitPressed = (sw1 && sw2) || pedal;
    if (exitPressed) {
        if (holdStart == 0) holdStart = millis();
        if (millis() - holdStart >= exitHoldTime) { beepMultiple(2); return true; }
    } else { holdStart = 0; }
    return false;
}

// -------------------- HEADING/COMPASS -------------
void updateHeading() {
    if (!useMagnetometer) return;
    sensors_event_t event;
    static int failCount = 0;
    static double filteredHeading = 0;
    const double alpha = 0.3;
    double rawHeading = 0;
    if (!mag.getEvent(&event)) {
        failCount++;
        if (failCount > 5) {
            Serial.println(F("Magnetometer failed repeatedly. Disabling..."));
            useMagnetometer = false; failCount = 0; return;
        }
        return;
    }
    failCount = 0;
    rawHeading = atan2(event.magnetic.y, event.magnetic.x) * 180 / PI;
    if (rawHeading < 0) rawHeading += 360;
    double delta = rawHeading - filteredHeading;
    if (delta > 180) delta -= 360; else if (delta < -180) delta += 360;
    filteredHeading += alpha * delta;
    if (filteredHeading < 0) filteredHeading += 360;
    if (filteredHeading >= 360) filteredHeading -= 360;
    currentHeading = filteredHeading;
    static unsigned long lastPrint = 0;
    if (millis() - lastPrint > 750) {
        Serial.print(F("Newheading (raw): ")); Serial.print(rawHeading, 2);
        Serial.print(F(" | Filtered: ")); Serial.println(filteredHeading, 2);
        lastPrint = millis();
    }
}

// ----------- ALLA HUVUDMENYER OCH KNAPP-SWEEP LOGIK -----------

void checkBothLongestPress(bool sw1, bool sw2) {
    static unsigned long lastUpdate = 0, holdStartTime = 0, lastBeepTime = 0;
    static bool releaseLogged = false, longPressTriggered = false;
    static unsigned long firstPressTime = 0; static bool waitingForSecondPress = false;
    bool activationPressed = (sw1 && sw2) || isPedalPressed();
    if (!bothPressing && activationPressed) {
        bothPressing = true; holdStartTime = millis(); lastUpdate = millis();
        lastBeepTime = millis(); releaseLogged = false; longPressTriggered = false; waitingForSecondPress = false;
    }
    else if (bothPressing && !activationPressed) {
        if (!releaseLogged && !longPressTriggered) {
            unsigned long held = millis() - holdStartTime;
            Serial.println(F("[DEBUG] Buttons released. Timer reset.")); releaseLogged = true; delay(50);
            if (held >= 8000) { Serial.println(F("[WARNING] 8s")); beep(5000); longPressTriggered = true; }
            else if (held >= 5000) { Serial.println(F("[sweep] 5s Speed")); beepMultipleDuration(3, 100); setMotorSpeed(); }
            else if (held >= 3000) { Serial.println(F("[Compass Mode] 3s Compass")); beepMultiple(2); runCompassMode(); }
            else if (held >= 300) { Serial.println(F("[sweep] 300ms sweep")); beepMultipleDuration(1, 300); runsweepmaticMode(); }
        }
        bothPressing = false;
        while (digitalRead(ROT_SW1) == LOW || digitalRead(ROT_SW2) == LOW || isPedalPressed()) delay(10);
    }
    else if (bothPressing) {
        unsigned long heldTime = millis() - holdStartTime;
        if (heldTime < 8000 && millis() - lastBeepTime >= 1000) { beep(100); lastBeepTime = millis(); }
        if (millis() - lastUpdate >= 500) {
            Serial.print(F("[DEBUG] Held Time: ")); Serial.print(heldTime / 1000.0, 1); Serial.println(F("s"));
            lastUpdate = millis();
        }
    }
}

void checkModeExit() {
    bool sw1 = (digitalRead(ROT_SW1) == LOW), sw2 = (digitalRead(ROT_SW2) == LOW), pedal = isPedalPressed();
    if (sw1 || sw2 || pedal) {
        static unsigned long pressStart = 0; if (pressStart == 0) pressStart = millis();
        if (millis() - pressStart >= 300) {
            if (compassModeActive) { compassModeActive = false; setHeading = 0; headingPID.SetMode(MANUAL); Serial.println(F("Compass Mode Deactivated")); }
            if (sweepModeActive) { sweepModeActive = false; Serial.println(F("Sweep Mode Deactivated")); }
            stopAllMotors(); pressStart = 0;
        }
    } else { static unsigned long pressStart = 0; pressStart = 0; }
}

// --------- ALLA MENYER: MOTOR SPEED, SWEEP ANGLE etc ---------
void setSweepAngle() {
  Serial.println(F("** setSweepAngle MENU **")); stopAllMotors();
  bool exitMenu = false; unsigned long lastButtonPress = 0; const unsigned long buttonDebounce = 300; unsigned long holdStart = 0;
  while (!exitMenu) {
    bool sw1 = (digitalRead(ROT_SW1) == LOW), sw2 = (digitalRead(ROT_SW2) == LOW), pedal = isPedalPressed();
    if (checkHoldToExit(holdStart)) { Serial.println(F("Exiting Sweep Angle Menu")); delay(1000); break; }
    if (sw1 && !sw2 && millis() - lastButtonPress > buttonDebounce) {
      lastButtonPress = millis(); sweep_angle = (sweep_angle >= 8) ? 2 : sweep_angle + 1; Serial.println(sweep_angle); beepMultiple(1);
    }
    if (!sw1 && sw2 && millis() - lastButtonPress > buttonDebounce) {
      lastButtonPress = millis(); sweep_angle = (sweep_angle <= 2) ? 8 : sweep_angle - 1; Serial.println(sweep_angle); beepMultiple(1);
    }
  }
}
void setMotorSpeed() {
    Serial.println(F("** Speed Adjustment  **")); stopAllMotors();
    bool exitMenu = false, adjustingSweepSpeed = false, adjustingManualSpeed = true; unsigned long lastButtonPress = 0, holdStart = 0, modeSwitchHoldStart = 0;
    const unsigned long buttonDebounce = 300, exitHoldTime = 3000, switchModeHoldTime = 1000; const int minSpeed = 50, maxSpeed = 250;
    Serial.println(F("MANUAL SPEED"));
    while (!exitMenu) {
      bool sw1 = (digitalRead(ROT_SW1) == LOW), sw2 = (digitalRead(ROT_SW2) == LOW), pedalPressed = isPedalPressed();
      bool switchModePressed = (sw1 && sw2) || pedalPressed;
      if (checkHoldToExit(holdStart)) { Serial.println(F("Exiting Speed Menu")); delay(1000); break; }
      if (switchModePressed) {
        if (modeSwitchHoldStart == 0) modeSwitchHoldStart = millis();
        else if (millis() - modeSwitchHoldStart >= switchModeHoldTime) {
          adjustingSweepSpeed = !adjustingSweepSpeed; adjustingManualSpeed = !adjustingSweepSpeed;
          Serial.println(adjustingSweepSpeed ? "Switched to adjusting: SWEEP MODE SPEED" : "Switched to adjusting: MANUAL MODE SPEED");
          beepTriple(); delay(500); modeSwitchHoldStart = 0;
        }
      } else modeSwitchHoldStart = 0;
      if (sw1 && !sw2 && millis() - lastButtonPress > buttonDebounce) {
        lastButtonPress = millis();
        if (adjustingSweepSpeed) {
          if (sweepSpeed < maxSpeed) { sweepSpeed += 25; if (myMotor) myMotor->setSpeed(sweepSpeed); EEPROM.write(1, sweepSpeed); EEPROM.commit(); Serial.println(sweepSpeed); beepQuickDouble(); }
          else { Serial.println(F("MAX (250)")); beepMinMaxAlert(); }
        } else if (adjustingManualSpeed) {
          if (manualSpeed < maxSpeed) { manualSpeed += 25; if (myMotor) myMotor->setSpeed(manualSpeed); EEPROM.write(0, manualSpeed); EEPROM.commit(); Serial.println(manualSpeed); beepLong(); }
          else { Serial.println(F("MAX (250)")); beepMinMaxAlert(); }
        }
      }
      if (!sw1 && sw2 && millis() - lastButtonPress > buttonDebounce) {
        lastButtonPress = millis();
        if (adjustingSweepSpeed) {
          if (sweepSpeed > minSpeed) { sweepSpeed -= 25; if (myMotor) myMotor->setSpeed(sweepSpeed); EEPROM.write(1, sweepSpeed); EEPROM.commit(); Serial.println(sweepSpeed); beepQuickDouble(); }
          else { Serial.println(F("MIN (50)")); beepMinMaxAlert(); }
        } else if (adjustingManualSpeed) {
          if (manualSpeed > minSpeed) { manualSpeed -= 25; if (myMotor) myMotor->setSpeed(manualSpeed); EEPROM.write(0, manualSpeed); EEPROM.commit(); Serial.println(manualSpeed); beepLong(); }
          else { Serial.println(F("MIN (50)")); beepMinMaxAlert(); }
        }
      }
      delay(200);
    }
}

// ------------ SWEEP MODE 2.0 (fullt med logik) -------------
void runsweepmaticMode() {
    sweepModeActive = true;
    beepMultiple(0); stopAllMotors(); delay(1000);
    const unsigned long timeoutLimit = 10000; unsigned long timeoutStart = millis();
    controlMotor(1, sweepSpeed);
    while (!isSensorActive()) {
        if (millis() - timeoutStart > timeoutLimit) { Serial.println(F("[SWEEP] Timeout while seeking start position.")); sweepModeActive = false; stopAllMotors(); return; }
        checkModeExit(); if (!sweepModeActive) return;
    }
    stopAllMotors(); int posCount = 0; delay(1000);
    while (sweepModeActive) {
        checkModeExit(); if (!sweepModeActive) break;
        controlMotor(-1, sweepSpeed); timeoutStart = millis();
        while (posCount < sweep_angle) {
            checkModeExit(); if (!sweepModeActive) return;
            if (isSensorActive() && millis() - lastPosSwPress > posSwDebounceTime) {
                lastPosSwPress = millis(); posCount++; Serial.print(F("[SWEEP] Sensor triggered - step forward: ")); Serial.println(posCount); timeoutStart = millis();
                while (isSensorActive()) { checkModeExit(); if (!sweepModeActive) return; delay(10); }
            }
            if (millis() - timeoutStart > timeoutLimit) { Serial.println(F("[SWEEP] Timeout while sweeping forward.")); sweepModeActive = false; stopAllMotors(); return; }
        }
        stopAllMotors(); delay(1000);
        controlMotor(1, sweepSpeed); timeoutStart = millis();
        while (posCount > 0) {
            checkModeExit(); if (!sweepModeActive) return;
            if (isSensorActive() && millis() - lastPosSwPress > posSwDebounceTime) {
                lastPosSwPress = millis(); posCount--; Serial.print(F("[SWEEP] Sensor triggered - step backward: ")); Serial.println(posCount); timeoutStart = millis();
                while (isSensorActive()) { checkModeExit(); if (!sweepModeActive) return; delay(10); }
            }
            if (millis() - timeoutStart > timeoutLimit) { Serial.println(F("[SWEEP] Timeout while sweeping backward.")); sweepModeActive = false; stopAllMotors(); return; }
        }
        stopAllMotors(); delay(1000);
    }
}

// ---------- MANUELL MODE --------------
void runManualMode(bool sw1, bool sw2) {
    static int lastState = -1; static unsigned long lastPrintTime = 0;
    if (sw1 && !sw2) { controlMotor(1, manualSpeed); if (lastState != 1 && millis() - lastPrintTime >= 1000) { Serial.println(F("M Right")); lastState = 1; lastPrintTime = millis(); } }
    else if (!sw1 && sw2) { controlMotor(-1, manualSpeed); if (lastState != 2 && millis() - lastPrintTime >= 1000) { Serial.println(F("M Left")); lastState = 2; lastPrintTime = millis(); } }
    else { stopAllMotors(); if (lastState != 0 && millis() - lastPrintTime >= 1000) { lastState = 0; lastPrintTime = millis(); } }
}

// ----------- CompassMode (heading, PID, motorstyrning, print, safety) -----------
void runCompassMode() {
    if (!useMagnetometer) { Serial.println(F("Compass mode skipped: Magnetometer disabled.")); return; }
    compassModeActive = true; Serial.println(F("Compass mode started.")); EEPROM.get(20, motorDirection);
    beepMultiple(2); stopAllMotors();
    if (millis() - lastDebugPrintTime >= 2000) {
        Serial.print(F("Initial User Setpoint: ")); Serial.println(userSetpoint); lastDebugPrintTime = millis();
    }
    while (compassModeActive) {
        checkModeExit();
        if (Serial.available()) {
            char command = Serial.read();
            if (command == 'H') {
                headingPID.SetMode(MANUAL); delay(50); if (Serial.available()) { userSetpoint = Serial.parseFloat(); Serial.print(F("New Heading Setpoint: ")); Serial.println(userSetpoint); }
                headingPID.SetMode(AUTOMATIC);
            } else handleSerialCommand(command);
        }
        updateHeading();
        double diff = shortestAngle(userSetpoint, currentHeading);
        pidInput = diff; pidSetpoint = 0; headingPID.Compute();
        if (millis() - lastDebugPrintTime >= 1000) {
            Serial.print(F("[DEBUG] Target Heading: ")); Serial.print(userSetpoint, 2);
            Serial.print(F(" | True Heading: ")); Serial.print(currentHeading, 2);
            Serial.print(F(" | Diff: ")); Serial.print(diff, 2);
            Serial.print(F(" | PID Output: ")); Serial.println(pidOutput, 2);
            lastDebugPrintTime = millis();
        }
        if (abs(diff) > 120) { stopAllMotors(); Serial.println(F("[COMPASS] Diff > 120°, motor stopped for safety!")); continue; }
        static unsigned long lastMotorUpdate = 0; const unsigned long motorUpdateInterval = 200; const int deadZone = 5; static unsigned long lastOnTargetPrint = 0;
        if (millis() - lastMotorUpdate >= motorUpdateInterval) {
            lastMotorUpdate = millis();
            int baseSpeed = 35, maxSpeed = 50; static int lastSpeed = 0;
            int targetSpeed = constrain(abs(pidOutput), baseSpeed, maxSpeed);
            int speed = lastSpeed + ((targetSpeed - lastSpeed) / 4); lastSpeed = speed;
            if (abs(diff) <= deadZone) {
                stopAllMotors(); if (millis() - lastOnTargetPrint > 1000) { Serial.println(F("ON TARGET (within deadZone) - STOPPING")); lastOnTargetPrint = millis(); } continue;
            }
            if (diff > turnThreshold) {
                Serial.print(F("Turning RIGHT | Speed: ")); Serial.println(speed); controlMotor(motorDirection == 1 ? 1 : -1, speed);
            } else if (diff < -turnThreshold) {
                Serial.print(F("Turning LEFT | Speed: ")); Serial.println(speed); controlMotor(motorDirection == 1 ? -1 : 1, speed);
            } else stopAllMotors();
        }
        delay(40);
    }
}

// ----------- BLUETOOTH & SERIALKOMMANDON (alla!) --------------
void handleBluetoothCommand(char command) {
  switch (command) {
    case 'L':
      controlMotor(-1, manualSpeed); break;
    case 'R':
      controlMotor(1, manualSpeed); break;
    case '+':
      saveSpeed(0, manualSpeed, min(manualSpeed + 25, 250)); if (myMotor) myMotor->setSpeed(manualSpeed); BTserial.print(F("Manual Speed: ")); BTserial.println(manualSpeed); break;
    case '-':
      saveSpeed(0, manualSpeed, max(manualSpeed - 25, 25)); if (myMotor) myMotor->setSpeed(manualSpeed); BTserial.print(F("Manual Speed: ")); BTserial.println(manualSpeed); break;
    case 'U':
      saveSpeed(1, sweepSpeed, min(sweepSpeed + 25, 250)); BTserial.print(F("Sweep Speed: ")); BTserial.println(sweepSpeed); break;
    case 'H':
      saveSpeed(1, sweepSpeed, max(sweepSpeed - 25, 25)); BTserial.print(F("Sweep Speed: ")); BTserial.println(sweepSpeed); break;
    case 'N':
      sweep_angle = min(sweep_angle + 1, 8); BTserial.print(F("Sweep Angle: ")); BTserial.println(sweep_angle); break;
    case 'n':
      sweep_angle = max(sweep_angle - 1, 2); BTserial.print(F("Sweep Angle: ")); BTserial.println(sweep_angle); break;
    case 'C':
      compassModeActive = true; BTserial.println(F("Compass Mode activated")); break;
    case 'A':
      sweepModeActive = true; BTserial.println(F("Sweep Mode Activated")); break;
    case 'S':
      sweepModeActive = false; compassModeActive = false; setHeading = 0; stopAllMotors(); Serial.println(F("Sweep OR Compass deactivated")); break;
    case 'P':
      if (BTserial.available()) { Kp = BTserial.parseFloat(); headingPID.SetTunings(Kp, Ki, Kd); savePIDValues(); }
      break;
    case 'I':
      if (BTserial.available()) { Ki = BTserial.parseFloat(); headingPID.SetTunings(Kp, Ki, Kd); savePIDValues(); }
      break;
    case 'D':
      if (BTserial.available()) { Kd = BTserial.parseFloat(); headingPID.SetTunings(Kp, Ki, Kd); savePIDValues(); }
      break;
    case 'T':
      if (BTserial.available()) { turnThreshold = BTserial.parseFloat(); turnThreshold = constrain(turnThreshold, 1, 20); EEPROM.put(12, turnThreshold); EEPROM.commit(); }
      break;
    case 'h':
      headingPID.SetMode(MANUAL); delay(50); if (Serial.available()) { userSetpoint = Serial.parseFloat(); Serial.print(F("New Heading Setpoint: ")); Serial.println(userSetpoint); } headingPID.SetMode(AUTOMATIC); break;
    case 'X':
      useMagnetometer = !useMagnetometer; Serial.print(F("Magnetometer is now ")); Serial.println(useMagnetometer ? "ENABLED" : "DISABLED"); BTserial.println(useMagnetometer ? "X1" : "X0"); break;
    case 'Q':
      calibrateCompassMotorDirection(); break;
    case 'O':
      BTserial.println(F("=== Current System Status ==="));
      BTserial.print(F("Driver Mode: ")); BTserial.println(driverMode == 1 ? "L298P" : "L298N");
      BTserial.print(F("Manual Speed: ")); BTserial.println(manualSpeed);
      BTserial.print(F("Sweep Speed: ")); BTserial.println(sweepSpeed);
      BTserial.print(F("Sweep Mode: ")); BTserial.println(sweepModeActive ? "Active" : "Inactive");
      BTserial.print(F("Current Heading: ")); BTserial.println(currentHeading);
      BTserial.print(F("Target Heading: ")); BTserial.println(setHeading);
      BTserial.print(F("Kp: ")); BTserial.println(Kp);
      BTserial.print(F("Ki: ")); BTserial.println(Ki);
      BTserial.print(F("Kd: ")); BTserial.println(Kd);
      BTserial.println(F("=== End of Report ==="));
      Serial.println(F("[BT] Sent system status report"));
      break;
    default: break;
  }
}
void handleSerialCommand(char command) {
  switch (command) {
    case 'C': delay(50); runCompassMode(); Serial.println(F("Compass Mode Activated")); break;
    case 'H': headingPID.SetMode(MANUAL); delay(50); if (Serial.available()) { userSetpoint = Serial.parseFloat(); Serial.print(F("New Heading Setpoint: ")); Serial.println(userSetpoint); } headingPID.SetMode(AUTOMATIC); break;
    case 'P': if (Serial.available()) { Kp = Serial.parseFloat(); headingPID.SetTunings(Kp, Ki, Kd); savePIDValues(); Serial.print(F("Kp set to: ")); Serial.println(Kp); } break;
    case 'I': if (Serial.available()) { Ki = Serial.parseFloat(); headingPID.SetTunings(Kp, Ki, Kd); savePIDValues(); Serial.print(F("Ki set to: ")); Serial.println(Ki); } break;
    case 'D': if (Serial.available()) { Kd = Serial.parseFloat(); headingPID.SetTunings(Kp, Ki, Kd); savePIDValues(); Serial.print(F("Kd set to: ")); Serial.println(Kd); } break;
    case 'S': sweepModeActive = false; compassModeActive = false; stopAllMotors(); Serial.println(F("Sweep + Compass deactivated")); break;
    case 'O': updateHeading(); Serial.print(F("Current Heading: ")); Serial.println(currentHeading); Serial.print(F("Target Heading: ")); Serial.println(userSetpoint); break;
    case 'Q': calibrateCompassMotorDirection(); break;
    case 'X': useMagnetometer = !useMagnetometer; Serial.print(F("Magnetometer is now ")); Serial.println(useMagnetometer ? "ENABLED" : "DISABLED"); break;
    default: while (Serial.available()) Serial.read(); Serial.println(F("Unknown Command")); break;
  }
}

// --------- KALIBRERING -----------
void calibrateCompassMotorDirection() {
    int testDirection = 1;
    Serial.println(F("=== Calibrating motor direction (compass) ==="));
    updateHeading(); double startHeading = currentHeading;
    Serial.print(F("Start Heading: ")); Serial.println(startHeading, 2);
    unsigned long startTime = millis();
    while (millis() - startTime < 4000) { controlMotor(1, 50); delay(5); }
    stopAllMotors(); delay(500); updateHeading();
    double endHeading = currentHeading; Serial.print(F("End Heading: ")); Serial.println(endHeading, 2);
    double delta = shortestAngle(endHeading, startHeading); Serial.print(F("Delta heading: ")); Serial.println(delta, 2);
    if (delta > 10) testDirection = 1;
    else if (delta < -10) testDirection = -1;
    else { Serial.println(F("Calibration failed! Not enough movement.")); return; }
    unsigned long returnTime = millis();
    while (millis() - returnTime < 4000) { controlMotor(-1, 50); delay(5); }
    stopAllMotors(); EEPROM.put(20, testDirection); EEPROM.commit();
    Serial.print(F("Motor Direction Calibrated: ")); Serial.println(testDirection);
    if (testDirection == 1) Serial.println(F("Motor 1 = RIGHT (increases heading)"));
    else Serial.println(F("Motor 1 = LEFT (decreases heading)"));
}

// ----------------------- SETUP & LOOP -------------------
void setup() {
  EEPROM.begin(EEPROM_SIZE);
  Wire.begin();
  mag.begin();
  Serial.begin(115200);
  BTserial.begin(9600, SERIAL_8N1, BT_RX, BT_TX);
  ledcSetup(PWM_CHANNEL, PWM_FREQ, PWM_RESOLUTION);
  ledcAttachPin(EN, PWM_CHANNEL);
  pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT); pinMode(POS_SW, INPUT_PULLUP);
  pinMode(ROT_SW1, INPUT_PULLUP); pinMode(ROT_SW2, INPUT_PULLUP);
  pinMode(BUZZER_PIN, OUTPUT); pinMode(PEDAL_BUTTON, INPUT_PULLUP);
  pinMode(HALL_SENSOR_PIN, INPUT_PULLUP);
  updateHeading(); loadSettings(); loadPIDValues();
  EEPROM.get(20, motorDirection); if (motorDirection != 1 && motorDirection != -1) motorDirection = 1;
  Serial.print(F("M.Dir ")); Serial.println(motorDirection);
  if (useMagnetometer && !mag.begin()) { Serial.println(F("Could not find a valid HMC5883L sensor, check wiring!")); useMagnetometer = false; }
  else { Serial.println(F("HMC5883L found and responsive.")); Serial.print(F("Heading:")); Serial.println(currentHeading); }
  if (sensorMode == 1) { useHallSensor = false; Serial.println(F("Sensor: POS-switch aktiv")); }
  else if (sensorMode == 2) { useHallSensor = true; Serial.println(F("Sensor: Hall-sensor aktiv")); }
  headingPID.SetMode(AUTOMATIC); headingPID.SetOutputLimits(-255, 255);
  int savedManualSpeed = EEPROM.read(0); int savedsweepSpeed = EEPROM.read(1);
  if (savedManualSpeed >= 50 && savedManualSpeed <= 250) manualSpeed = savedManualSpeed; else manualSpeed = 125;
  if (savedsweepSpeed >= 50 && savedsweepSpeed <= 250) sweepSpeed = savedsweepSpeed; else sweepSpeed = 150;
  updateDebounceTime();
}

void loop() {
  if (Serial.available()) {
    char data = Serial.read(); BTserial.write(data); handleSerialCommand(data);
  }
  if (BTserial.available()) {
    char data = BTserial.read(); handleBluetoothCommand(data);
  }
  bool sw1 = (digitalRead(ROT_SW1) == LOW), sw2 = (digitalRead(ROT_SW2) == LOW);
  checkBothLongestPress(sw1, sw2); checkModeExit();
  if (!sweepModeActive && !compassModeActive) runManualMode(sw1, sw2);
  static unsigned long lastHeadingCheck = millis(); static double previousHeading = 0; static int headingStuckCount = 0;
  if ((sweepModeActive || compassModeActive) && lastPwmValue > 0 && useMagnetometer && millis() - lastHeadingCheck > 5000) {
    if (abs(currentHeading - previousHeading) < 0.1) {
      headingStuckCount++; Serial.print(F("Heading still stuck! Retry #")); Serial.println(headingStuckCount);
      Serial.print(F("Heading:")); Serial.println(currentHeading); Serial.print(F("previousHeading:")); Serial.println(previousHeading);
      if (headingStuckCount >= 3) { Serial.println(F("Too many heading stalls. Disabling magnetometer.")); useMagnetometer = false; headingStuckCount = 0; }
    } else headingStuckCount = 0;
    previousHeading = currentHeading; lastHeadingCheck = millis();
  }
  if (useMagnetometer) updateHeading();
  delay(200);
}
